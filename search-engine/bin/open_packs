#!/usr/bin/env ruby
# frozen_string_literal: true

require_relative '../lib/card_database'
require_relative '../lib/sealed'

if ARGV.size.zero?
  warn "Usage: #{$PROGRAM_NAME} [SETCODE COUNTxSETCODE ...]"
  warn 'Examples:'
  warn "  #{$PROGRAM_NAME} 6xM11"
  warn "  #{$PROGRAM_NAME} NPH MBS SOM"
  warn 'To see list of supported packs:'
  warn "  #{$PROGRAM_NAME} --list"
  warn 'To see list of packs which are not implemented yet:'
  warn "  #{$PROGRAM_NAME} --unsupported"
  exit 1
end

db = CardDatabase.load
factory = PackFactory.new(db)

case ARGV[0]
when '--list'
  db.sets_with_packs.each do |set|
    puts format('%3s %s', set.code.upcase, set.name)
  end
when '--unsupported'
  db.sets.values.select do |set|
    set.has_boosters? and !factory.for(set.code)
  end.each do |set|
    puts format('%3s %s', set.code.upcase, set.name)
  end
else
  cards = Sealed.new(db, *ARGV).call
  # There could be muliple basic arts etc., ignore everything except foil flag
  cards_with_counts = cards
                      .group_by { |x| [x.name, x.foil] }
                      .map { |k, v| [k, v.count] }
                      .sort_by { |(n, f), _v| [n, f ? 1 : 0] }
  count_width = cards_with_counts.map(&:last).map(&:to_s).map(&:size).max
  cards_with_counts.each do |(name, foil), count|
    foil_indicator = foil ? ' [foil]' : ''
    count_indicator = if count == 1
                        ' ' * (count_width + 1)
                      else
                        "%#{count_width}dx" % count
                      end
    puts "#{count_indicator} #{name}#{foil_indicator}"
  end
end
