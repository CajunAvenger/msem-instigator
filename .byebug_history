continue
c
continue
card.card.designer
card.card.printing
card.card
card.designer
card
c
continue
n
@cond.metadata! :fuzzy, nil
@cond.metadata! :logger, logger
@cond.metadata! :logger
@cond.metadata!
@cond
n
Set[*@warnings]
logger
n
exit
query.search(self)
query.is_a?(Query)
query
exit
t = $CardDatabase.search(query)
query
n
exit
@results
n
@cards
n
query.view
n
@warnings
n
results
n
query
n
query.seed
n
@sorter.warnings
n
@sorter
n
query = parse_query
@tokens
n
tokens
n
s[2].downcase
s[2]
c
exit
s[2]
c
n
s[2]
s[1]
s[0]
continue
n
s[0]
exit
s[1]
s[0]
exit
s[2]
s[1]
s[0]
s.eos?
s.eos
str
puts(s)
s.each
s.all
s.scan(/designer\s*[:=]\s*(?:"(.*?)"|(\w+))/i)
exit
tokens
n
s[0].downcase
s[0]
exit
s[0]
exit
s
s[1]
ConditionDesigner.new
continue
@card.card.designer
@card.card
@card.designer
@card
cont
end
@card
card
exit
Card.all
Card.first
Card.type
Card
@warnings
tokens
exit
ConditionDesigner
str.scan('test')
str.scan('designer')
s.scan(designer)
str
continue
str
continue
c
n
s
